XP->EXTREME PROGRAMMING EXPLAINED BY KENT BACK.

Chapter 1. What is XP?



Prepare for success. Don’t protect yourself from success by holding back. Do your best and then deal with the consequences. That’s extreme.


 In XP you only do what you need to do to create value for the customer. You can’t carry a lot of baggage and move fast. However, there is no freeze-dried software process. The body of technical knowledge necessary to be an outstanding team is large and growing.



XP means giving up old habits of working for new ways tailored to today’s reality.




XP assumes that you see yourself as part of a team, ideally one with clear goals and a plan of execution.


 The business changes. The technology changes. The team changes. The team members change. The problem isn’t change, because change is going to happen; the problem, rather, is our inability to cope with change.


Bridging the gap between values and practices are principles

 Marigolds naturally repel some of the bugs that eat strawberries. Planting them together is a practice. Companion planting is the principle.


. First you have to garden, then join the community of gardeners, then teach others to garden. Then you are a gardener.


 XP embraces five values to guide development: communication, simplicity, feedback, courage, and respect.

COMMUNICATION--->	
	when you don't have a proper communication or lack
	of communication than problem arises in development.

example of me and Akash doing thing and at that time if i hesitate to ask how to do this things,than i never came to know that this type of shortcut exist.


SIMPLICITY-->
		Simplicity only makes sense in context. If I’m writing a parser with a team that understands parser generators, then using a parser generator is simple. If the team doesn’t know anything about parsing and the language is simple, a recursive descent parser is simpler.



FEEDBACK-->
		Being satisfied with improvement rather than expecting instant perfection, we use feedback to get closer and closer to our goals. Feedback comes in many forms:



Courage-->
		Sometimes courage manifests as a bias to action. If you know what the problem is, do something about it. Sometimes courage manifests as patience. If you know there is a problem but you don’t know what it is, it takes courage to wait for the real problem to emerge distinctly.


Respect--> 
	If members of a team don’t care about each other and what they are doing, XP won’t work. If members of a team don’t care about a project, nothing can save it.




Communication preferred over long documents


Mutual Benefit is important in XP .Both the 2 person involved in XP
are getting benefits when they are spending time each other.

If you want people to take your advice, you need to solve more problems than you create.


The principle of diversity suggests that the programmers should work together on the problem and both opinions should be valued.


. Reflection comes after action. Learning is action reflected. To maximize feedback, reflection in XP teams is mixed with doing.



Learn to see problems as opportunities for change. This isn’t to say there are no problems in software development. However, the attitude of “survival” leads to just enough problem solving to get by. To reach excellence, problems need to turn into opportunities for learning and improvement, not just survival.

You might not know what to do about a problem. You might want more time to think about what to do. Sometimes the desire for more time is a mask worn to protect from the fear of the consequences of getting going. Sometimes, though, patience solves a problem by itself.

It maximizes strengths and minimizes weaknesses. Can’t make accurate long-term plans? Fine—have a quarterly cycle during which you refine your long-term plans. A person alone makes too many mistakes? Fine—program in pairs. The practices are effective precisely because they address the enduring problems of people developing software together.


Projects don’t go faster by accepting lower quality. They don’t go slower by demanding higher quality. Pushing quality higher often results in faster delivery; while lowering quality standards often results in later, less predictable delivery.




********Primary Practice*****************
1.Sit Together-->
			no matter what the client says the problem is, it is always a people problem. Technical fixes alone are not enough. The other lesson I took was how important it is to sit together, to communicate with all our senses.

Lets say you are having a problem ,than do travelling and than we can start.


Include on the Team people with all skills and persppectives necessary for the project to succedd.This is really nothing more than the old idea of cross-functional teams.

How we can say that it is successfull team
	When people feel :
						1. We belong
						2. We are in this together
						3. We support each other's work,growth and learning.

12 members are good enough in team.

Informative Workspace--->
						Make your workspace about your work.An interested observer should be able to walk into the team space and get a general idea of how the project is going in 15 sec.


Energized work--> Work only as many hours as you can be productive and only as many hours you can sustain.

Pair Programming-->
		Pair programmers:

			 Keep each other on task.

			 Brainstorm refinements to the system.

			 Clarify ideas.

			 Take initiative when their partner is stuck, thus lowering frustration.

			 Hold each other accountable to the team’s practices.



Corollary(PROVEN) Practices
----------------------
		About how you develop. If they don’t yet, they will soon. When you act trustworthy and have nothing to hide, you are more productive. (Think of all the time you no longer have to spend hiding or covering up.) When you are ready with accurate estimates and low defect rates, including customers in the development process fosters trust and encourages continued improvement.

Team Continuity
		 Value in software is created not just by what people know and do but also by their relationships and what they accomplish together. Ignoring the value of relationships and trust just to simplify the scheduling problem is false economy

Taiichi Ohno has a simple exercise for this last step, the Five Whys. Ask five times why a problem occurred. So, for example,

1. Why did we miss this defect? Because we didn’t know the balance could be negative overnight.

2. Why didn’t we know? Because only Mrs. Crosby knows and she isn’t part of the team.

3. Why isn’t she part of the team? Because she is still supporting the old system and no one else knows how.

4. Why doesn’t anyone else know how? Because it isn’t a management priority to teach anyone.

5. Why isn’t it a management priority? Because they didn’t know that a $20,000 investment could have saved us $500,000.

After Five Whys, you find the people problem lying at the heart of the defect (and it’s almost always a people problem). Addressing that problem and the other problems encountered along the way will give you some reassurance that you won’t ever have to deal with this particular mistake again.


Shared Code
			Anyone on the team can improve any part of the system at any time.
			 If something is wrong with the system and fixing it is not out of 
			 scope for what I’m doing right now, I should go ahead and fix it.




Daily Deployment
			Put new software into production every night. Any gap between what 	is on a programmer’s desk and what is in production is a risk. A programmer out of sync with the deployed software risks making decisions without getting accurate feedback about those decisions.

			Daily deployment is a corollary practice because it has so many prerequisites. The defect rate must be at most a handful per year. The build environment must be smoothly automated



How do you implement daily deployment when you have projects that take weeks or months before they are usable? 
			There are many tasks involved in a big project: restructuring the database, implementing new features, and changing the user interface. As long as you don’t change the user’s experience of the system, you can deploy all the rest of that work.



Best example is Pay per use like for eg. company ask for money to customer for every message he is going to send.

So in software industry it is like pay-per-release

=========================================================================================================================================

***********************The Whole XP Team*********************

Testers
	Testers on an XP team help customers choose and write automated system-level tests in advance of implementation and coach programmers on testing techniques.

How can you say Team's health in Good Condition.
	1.
		The first is the number of defects found after development. An XP team should have dramatically fewer defects in its first deployment and make rapid progress from there. Some XP teams that have been on the path of improvement for several years see only a handful of defects per year. No defect is acceptable; each is an opportunity for the team to learn and improve.
	2.
		The second metric I use is the time lag between the beginning of investment in an idea and when the idea first generates revenue. Even small organizations typically find they take more than a year from investment to return. Gradually reducing the time from investment to return increases the amount and timeliness of feedback available to the whole team.


==========================================================================================================================================

	Planning: Managing Scope
		Planning makes goals and directions clear and explicit. Planning in XP starts with putting the current goals, assumptions, and facts on the table	


		Part of planning is deciding what to do next out of all the possibilities. Planning is complicated because the estimates of the cost and value of stories are uncertain.

		When choosing which stories to implement next, sort them several ways. The act of laying the stories out spatially provides new insight into the relationships between the stories and smooths the selection process. You could put risky stories towards the left and valuable stories towards the top. You could put all the performance tuning stories in one corner of the table and all the new functionality stories in another corner. Whenever I get lost while planning, I gather all the stories up off the table, shuffle them, and lay them out fresh
